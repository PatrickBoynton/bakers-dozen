{"version":3,"sources":["components/layout/recipe/RecipeList.js","components/layout/recipe/RecipeDisplay.js","App.js","reportWebVitals.js","index.js"],"names":["RecipeList","props","state","recipes","a","fetch","recipeList","json","data","this","setState","map","recipe","title","name","Component","RecipeDisplay","response","console","log","App","className","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4QA4BeA,E,kDAzBX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,QAAS,IAHE,E,4FAMnB,8BAAAC,EAAA,sEAC6BC,MAAM,mBADnC,cACUC,EADV,gBAEuBA,EAAWC,OAFlC,OAEUC,EAFV,OAGIC,KAAKC,SAAS,CAACP,QAASK,IAH5B,gD,0EAMA,WAAU,IAAD,EACCL,EAAO,UAAGM,KAAKP,MAAMC,eAAd,aAAG,EAAoBQ,KAAI,SAAAC,GAAM,OAAI,oCAC9C,6BAAKA,EAAOC,QACZ,4BAAID,EAAOE,aAEf,OACI,8BACKX,Q,GApBQY,aCoBVC,E,kDAnBX,WAAYf,GAAQ,uCACVA,G,4FAGV,8BAAAG,EAAA,sEAC2BC,MAAM,sBADjC,cACUY,EADV,gBAEuBA,EAASV,OAFhC,OAEUC,EAFV,OAGIU,QAAQC,IAAIX,GAHhB,2C,0EAMA,WACI,OACI,oD,GAbgBO,aCiBbK,E,4JAZX,WACI,OACI,qBAAKC,UAAU,MAAf,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,KAAK,WAAWC,UAAWvB,IAClC,cAAC,IAAD,CAAOsB,KAAK,eAAeC,UAAWP,a,GANxCD,aCMHS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,QCAdQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,UACI,cAAC,EAAD,QAGRC,SAASC,eAAe,SAM5Bb,M","file":"static/js/main.f6524579.chunk.js","sourcesContent":["import {Component} from 'react';\n\nclass RecipeList extends Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            recipes: [],\n        }\n    }\n    async componentDidMount() {\n        const recipeList = await fetch(\"/api/v1/recipes\");\n        const data = await recipeList.json();\n        this.setState({recipes: data})\n    }\n\n    render() {\n        const recipes = this.state.recipes?.map(recipe => <section>\n            <h2>{recipe.title}</h2>\n            <p>{recipe.name}</p>\n        </section> );\n        return (\n            <div>\n                {recipes}\n            </div>\n        );\n    }\n}\n\nexport default RecipeList","import {Component} from 'react';\n\nclass RecipeDisplay extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    async componentDidMount() {\n        const response = await fetch(`/api/v1/recipes/1/`);\n        const data = await response.json();\n        console.log(data);\n    }\n\n    render() {\n        return (\n            <div>\n                RecipeDisplay\n            </div>\n        );\n    }\n}\n\nexport default RecipeDisplay;","import './App.css';\nimport {Component} from 'react';\nimport {Switch, Route} from 'react-router-dom';\nimport RecipeList from './components/layout/recipe/RecipeList';\nimport RecipeDisplay from './components/layout/recipe/RecipeDisplay';\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <Switch>\n                    <Route path=\"/recipes\" component={RecipeList}/>\n                    <Route path=\"/recipes/:id\" component={RecipeDisplay}/>\n                </Switch>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <App/>\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}