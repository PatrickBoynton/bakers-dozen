{"version":3,"sources":["components/layout/recipe/RecipeList.js","components/layout/recipe/RecipeDisplay.js","components/layout/recipe/Ingredients.js","components/layout/Navigation/Navigation.js","components/user/Login.js","components/user/Register.js","App.js","reportWebVitals.js","index.js"],"names":["RecipeList","props","state","recipes","a","fetch","recipeList","json","data","this","setState","map","recipe","title","name","id","Component","RecipeDisplay","isEditMode","recipe_type","redirect","handleEditMode","bind","handleEdit","handleInput","previousState","event","preventDefault","console","log","target","value","window","location","href","length","response","undefined","action","onSubmit","onChange","type","onClick","Ingredients","is_public","yields","handleSubmit","handleCheck","e","options","method","headers","body","JSON","stringify","htmlFor","className","Navigation","activeClassName","to","Login","Register","App","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d5dacbe9.chunk.js","sourcesContent":["import {Component} from 'react';\n\nclass RecipeList extends Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            recipes: [],\n        }\n    }\n    async componentDidMount() {\n        const recipeList = await fetch(\"/api/v1/recipes\");\n        const data = await recipeList.json();\n        this.setState({recipes: data})\n    }\n\n    render() {\n        const recipes = this.state.recipes?.map(recipe => <section key={recipe.id}>\n            <h2>{recipe.title}</h2>\n            <p>{recipe.name}</p>\n        </section> );\n        return (\n            <div>\n                {recipes}\n            </div>\n        );\n    }\n}\n\nexport default RecipeList","import {Component} from 'react';\nimport {Redirect} from 'react-router-dom';\n\nclass RecipeDisplay extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            recipe: '',\n            isEditMode: false,\n            title: '',\n            name: '',\n            recipe_type: '',\n            redirect: false,\n        };\n        this.handleEditMode = this.handleEditMode.bind(this);\n        this.handleEdit = this.handleEdit.bind(this);\n        this.handleInput = this.handleInput.bind(this);\n    }\n\n    handleEditMode() {\n        this.setState((previousState) => ({isEditMode: !previousState.isEditMode}));\n    }\n\n    handleEdit(event) {\n        event.preventDefault();\n        console.log(this.state.name, this.state.title, this.state.recipe_type);\n        // this.setState({redirect: true});\n    }\n\n    handleInput(event) {\n        this.setState({[event.target.name]: event.target.value});\n    }\n\n    async componentDidMount() {\n        const id = window.location.href;\n        const response = await fetch(`/api/v1/recipes/${id[id.length - 1]}/`);\n        const data = await response.json();\n        if (response !== null || response !== undefined) {\n            this.setState({name: data.name, title: data.title, recipe_type: data.recipe_type});\n        }\n    }\n\n    render() {\n        const recipe = <section>\n            {\n                this.state.isEditMode\n                    ?\n                    <>\n                        <form action=\"\" onSubmit={this.handleEdit}>\n                            <input name=\"title\" onChange={this.handleInput} value={this.state.title}/>\n                            <input name=\"name\" onChange={this.handleInput} value={this.state.name}/>\n                            <select onChange={this.handleInput} name=\"recipe_type\">\n                                <option value=\"Breakfast\">Breakfast</option>\n                                <option value=\"Lunch\">Lunch</option>\n                                <option value=\"Dinner\">Dinner</option>\n                            </select>\n                            <button type=\"submit\">Submit</button>\n                        </form>\n                    </>\n                    :\n                    <>\n                        <h2>{this.state.title}</h2>\n                        <p>{this.state.name}</p>\n                        <p>{this.state.recipe_type}</p>\n                    </>\n            }\n            {/*TODO Make it so user is only one to edit recipe*/}\n            <button onClick={() => this.handleEditMode()}>Edit Recipe</button>\n        </section>;\n        return (\n            <>\n                {recipe}\n            </>\n        );\n    }\n}\n\nexport default RecipeDisplay;","import {Component} from 'react';\nimport Cookies from 'js-cookie';\n\nclass Ingredients extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            // ingredient_array: [],\n            // ingredients: '',\n            title: '',\n            name: '',\n            recipe_type: '',\n            is_public: false,\n            yields: 0\n        };\n        this.handleInput = this.handleInput.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleCheck = this.handleCheck.bind(this);\n    }\n\n    handleInput(event) {\n        this.setState({[event.target.name]: event.target.value});\n    }\n\n    // addIngredient(e) {\n    //     e.preventDefault();\n    //     this.setState({ingredient_array: [...this.state.ingredient_array, this.state.ingredients]});\n    // }\n    //\n    // addStep(e) {\n    //     e.preventDefault();\n    //     this.setState({steps: [...this.state.steps, this.state.step]})\n    // }\n\n    async handleSubmit(e) {\n        e.preventDefault();\n        const options = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'Application/Json',\n                // 'X-CSRFToken': Cookies.get(\"csrftoken\")\n            },\n            body: JSON.stringify({\n                title: this.state.title,\n                name: this.state.name\n            })\n        };\n        await fetch('/api/v1/recipes/', options);\n        this.setState({title: this.state.title, name: this.state.name, recipe_type: this.state.recipe_type});\n    }\n\n    handleCheck() {\n        this.setState((previousState) => ({is_public: !previousState.is_public}))\n    }\n\n    render() {\n        // const stepsDisplay = this.state.steps?.map(x => <textarea>{x}</textarea>);\n        // const ingredientDisplay = this.state.ingredient_array?.map((x, index) => <div key={index}>\n        //     <input key={index} type=\"text\" value={x} disabled/>\n        //     <button className=\"btn btn-danger\" onClick={(e) => e.preventDefault()}>X</button>\n        // </div>);\n        return (\n            <form action=\"\" onSubmit={this.handleSubmit}>\n                <h2>Add an Ingredient</h2>\n                <label htmlFor=\"title\">Recipe Name</label>\n                <input type=\"text\" onChange={this.handleInput} value={this.state.title} name=\"title\" id=\"\"/>\n                <label htmlFor=\"name\">Your Name</label>\n                <input type=\"text\" onChange={this.handleInput} value={this.state.name} name=\"name\"/>\n                <label htmlFor=\"recipe_type\">Recipe Type</label>\n                <select name=\"recipe_type\">\n                    <option value=\"breakfast\">Breakfast</option>\n                    <option value=\"lunch\">Lunch</option>\n                    <option value=\"dinner\">Dinner</option>\n                    <option value=\"dessert\">Dessert</option>\n                </select>\n                <label htmlFor=\"is_public\">Would you like others to see your recipe?</label>\n                <input onClick={this.handleCheck} type=\"checkbox\" name=\"is_public\" value=\"true\"/>\n                <label htmlFor=\"yields\">Yield: </label>\n                <input type=\"number\" onChange={this.handleInput} name=\"yields\" value={this.state.yields} id=\"\"/>\n                {/*<label htmlFor=\"ingredients\">Ingredients</label>*/}\n                {/*{ingredientDisplay}*/}\n                {/*<input className=\"form-control\"*/}\n                {/*       type=\"text\"*/}\n                {/*       name=\"ingredients\"*/}\n                {/*       value={this.state.ingredients}*/}\n                {/*       onChange={this.handleInput}/>*/}\n                {/*<button className=\"btn btn-success\" onClick={(e) => this.addIngredient(e)}>Add Ingredient</button>*/}\n                {/*<label htmlFor=\"step\">Steps</label>*/}\n                {/*<input className=\"form-control\"*/}\n                {/*       type=\"text\"*/}\n                {/*       value={this.state.step}*/}\n                {/*       onChange={this.handleInput}*/}\n                {/*       name=\"step\"/>*/}\n                {/*<button className=\"btn btn-success mb-3\" onClick={(e) => this.addStep(e)}>Add Steps</button>*/}\n                <button className=\"btn btn-primary\" type=\"submit\">Add Recipe</button>\n            </form>\n        );\n    }\n\n}\n\nexport default Ingredients;","import {Component} from 'react';\nimport {NavLink} from 'react-router-dom';\nclass Navigation extends Component {\n    render() {\n        return (\n            <>\n                <nav className=\"nav d-flex flex-column\">\n                    <ul>\n                        <li><NavLink activeClassName=\"background\" className=\"nav-link\" to=\"/login\">Login</NavLink></li>\n                        <li><NavLink activeClassName=\"background\" className=\"nav-link\" to=\"/register\">Register</NavLink></li>\n                        <li><NavLink activeClassName=\"background\" className=\"nav-link\" to=\"/create-recipe\">Create Recipe</NavLink></li>\n                        <li><NavLink activeClassName=\"background\" className=\"nav-link\" to=\"/recipes\">My Recipes</NavLink></li>\n                        <li><NavLink activeClassName=\"background\" className=\"nav-link\" to=\"/public\">Public Recipes</NavLink></li>\n                        <li><NavLink activeClassName=\"background\" className=\"nav-link\" to=\"/popular\">Popular Recipes</NavLink></li>\n                        <li><NavLink activeClassName=\"background\" className=\"nav-link\" to=\"/favorites\">My Favorite Recipes</NavLink></li>\n                        <li><NavLink activeClassName=\"background\" className=\"nav-link\" to=\"/ingredients\">My Pantry</NavLink></li>\n                    </ul>\n                </nav>\n            </>\n        );\n    }\n}\n\nexport default Navigation;","import {Component} from 'react';\n\nclass Login extends Component {\n    render() {\n        return (\n            <form>\n                <label htmlFor=\"username\">Username</label>\n                <input type=\"text\" name=\"username\" id=\"\"/>\n                <label htmlFor=\"email\">Email</label>\n                <input type=\"email\" name=\"email\" id=\"\"/>\n                <label htmlFor=\"password\">Password</label>\n                <input type=\"password\" name=\"password\" id=\"\"/>\n                <button className=\"btn btn-primary\" type=\"submit\">Login</button>\n            </form>\n        );\n    }\n}\n\nexport default Login;","import {Component} from 'react';\n\nclass Register extends Component {\n    render() {\n        return (\n            <form action=\"\">\n                <label htmlFor=\"username\">Username</label>\n                <input type=\"text\"/>\n                <label htmlFor=\"email\">Email</label>\n                <input type=\"text\"/>\n                <label htmlFor=\"password1\">Password</label>\n                <input type=\"text\"/>\n                <label htmlFor=\"password2\">Confirm Password</label>\n                <input type=\"text\"/>\n                <button type=\"submit\">Register</button>\n            </form>\n        );\n    }\n}\n\nexport default Register","import './App.css';\nimport {Component} from 'react';\nimport {Switch, Route} from 'react-router-dom';\nimport RecipeList from './components/layout/recipe/RecipeList';\nimport RecipeDisplay from './components/layout/recipe/RecipeDisplay';\nimport Ingredients from './components/layout/recipe/Ingredients';\nimport Navigation from './components/layout/Navigation/Navigation';\nimport Login from './components/user/Login';\nimport Register from './components/user/Register';\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <Navigation/>\n                <Switch>\n                    <Route path=\"/login\" component={Login}/>\n                    <Route path=\"/register\" component={Register} />\n                    <Route path=\"/recipes\" component={RecipeList}/>\n                    <Route path=\"/recipe/:id\">\n                        <RecipeDisplay/>\n                    </Route>\n                    <Route path=\"/create-recipe\" component={Ingredients}/>\n                </Switch>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <App/>\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}