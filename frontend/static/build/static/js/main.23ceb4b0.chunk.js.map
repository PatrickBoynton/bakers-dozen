{"version":3,"sources":["components/layout/recipe/RecipeList.js","components/layout/recipe/RecipeDisplay.js","components/layout/recipe/Ingredients.js","App.js","reportWebVitals.js","index.js"],"names":["RecipeList","props","state","recipes","a","fetch","recipeList","json","data","this","setState","map","recipe","title","name","id","Component","RecipeDisplay","isEditMode","recipe_type","redirect","handleEditMode","bind","handleEdit","handleInput","previousState","event","preventDefault","target","value","window","location","href","length","response","undefined","action","onSubmit","onChange","type","onClick","to","Ingredients","handleSubmit","e","options","method","headers","body","JSON","stringify","htmlFor","className","App","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.23ceb4b0.chunk.js","sourcesContent":["import {Component} from 'react';\n\nclass RecipeList extends Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            recipes: [],\n        }\n    }\n    async componentDidMount() {\n        const recipeList = await fetch(\"/api/v1/recipes\");\n        const data = await recipeList.json();\n        this.setState({recipes: data})\n    }\n\n    render() {\n        const recipes = this.state.recipes?.map(recipe => <section key={recipe.id}>\n            <h2>{recipe.title}</h2>\n            <p>{recipe.name}</p>\n        </section> );\n        return (\n            <div>\n                {recipes}\n            </div>\n        );\n    }\n}\n\nexport default RecipeList","import {Component} from 'react';\nimport {Redirect} from 'react-router-dom';\n\nclass RecipeDisplay extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            recipe: '',\n            isEditMode: false,\n            title: '',\n            name: '',\n            recipe_type: '',\n            redirect: false,\n        };\n        this.handleEditMode = this.handleEditMode.bind(this);\n        this.handleEdit = this.handleEdit.bind(this);\n        this.handleInput = this.handleInput.bind(this);\n    }\n\n    handleEditMode() {\n        this.setState((previousState) => ({isEditMode: !previousState.isEditMode}));\n    }\n\n    handleEdit(event) {\n        event.preventDefault();\n        // console.log(event.target);\n        this.setState({redirect: true});\n    }\n\n    handleInput(event) {\n        this.setState({[event.target.name]: event.target.value});\n    }\n\n    async componentDidMount() {\n        const id = window.location.href;\n        const response = await fetch(`/api/v1/recipes/${id[id.length - 1]}/`);\n        const data = await response.json();\n        if (response !== null || response !== undefined) {\n            this.setState({recipe: data});\n        }\n    }\n\n    render() {\n        const recipe = <section>\n            {\n                this.state.isEditMode\n                    ?\n                    <>\n                        <form action=\"\" onSubmit={() => this.handleEdit()}>\n                            <input name=\"title\" onChange={this.handleInput} value={this.state.recipe.title}/>\n                            <input onChange={this.handleInput} value={this.state.recipe.name}/>\n                            <select onChange={this.handleInput} value={this.state.recipe_type}>\n                                <option value=\"Breakfast\">Breakfast</option>\n                                <option value=\"Lunch\">Lunch</option>\n                                <option value=\"Dinner\">Dinner</option>\n                            </select>\n                            <button type=\"submit\">Submit</button>\n                        </form>\n                    </>\n                    :\n                    <>\n                        <h2>{this.state.recipe.title}</h2>\n                        <p>{this.state.recipe.name}</p>\n                    </>\n            }\n            {/*TODO Make it so user is only one to edit recipe*/}\n            <button onClick={() => this.handleEditMode()}>Edit Recipe</button>\n        </section>;\n        if (this.state.redirect) {\n            return <Redirect to=\"/recipes\"/>;\n        }\n        return (\n            <>\n                {recipe}\n            </>\n        );\n    }\n}\n\nexport default RecipeDisplay;","import {Component} from 'react';\nimport Cookies from 'js-cookie';\n\nclass Ingredients extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            // ingredient_array: [],\n            // ingredients: '',\n            title: '',\n            name: '',\n            recipe_type: '',\n        };\n        this.handleInput = this.handleInput.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleInput(event) {\n        this.setState({[event.target.name]: event.target.value});\n    }\n\n    // addIngredient(e) {\n    //     e.preventDefault();\n    //     this.setState({ingredient_array: [...this.state.ingredient_array, this.state.ingredients]});\n    // }\n    //\n    // addStep(e) {\n    //     e.preventDefault();\n    //     this.setState({steps: [...this.state.steps, this.state.step]})\n    // }\n\n    async handleSubmit(e) {\n        e.preventDefault();\n        const options = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'Application/Json',\n                // 'X-CSRFToken': Cookies.get(\"csrftoken\")\n            },\n            body: JSON.stringify({\n                title: this.state.title,\n                name: this.state.name\n            })\n        };\n        await fetch('/api/v1/recipes/', options);\n        this.setState({title: this.state.title, name: this.state.name});\n    }\n\n    render() {\n        // const stepsDisplay = this.state.steps?.map(x => <textarea>{x}</textarea>);\n        // const ingredientDisplay = this.state.ingredient_array?.map((x, index) => <div key={index}>\n        //     <input key={index} type=\"text\" value={x} disabled/>\n        //     <button className=\"btn btn-danger\" onClick={(e) => e.preventDefault()}>X</button>\n        // </div>);\n        return (\n            <form action=\"\" onSubmit={this.handleSubmit}>\n                <h2>Add an Ingredient</h2>\n                <label htmlFor=\"title\">Recipe Name</label>\n                <input type=\"text\" onChange={this.handleInput} value={this.state.title} name=\"title\" id=\"\"/>\n                <label htmlFor=\"name\">Your Name</label>\n                <input type=\"text\" onChange={this.handleInput} value={this.state.name} name=\"name\"/>\n                <label htmlFor=\"recipe_type\">Recipe Type</label>\n                <select name=\"recipe_type\" id=\"recipe_type\">\n                    <option value=\"breakfast\">Breakfast</option>\n                    <option value=\"lunch\">Lunch</option>\n                    <option value=\"dinner\">Dinner</option>\n                    <option value=\"dessert\">Dessert</option>\n                </select>\n                {/*<label htmlFor=\"ingredients\">Ingredients</label>*/}\n                {/*{ingredientDisplay}*/}\n                {/*<input className=\"form-control\"*/}\n                {/*       type=\"text\"*/}\n                {/*       name=\"ingredients\"*/}\n                {/*       value={this.state.ingredients}*/}\n                {/*       onChange={this.handleInput}/>*/}\n                {/*<button className=\"btn btn-success\" onClick={(e) => this.addIngredient(e)}>Add Ingredient</button>*/}\n                {/*<label htmlFor=\"step\">Steps</label>*/}\n                {/*<input className=\"form-control\"*/}\n                {/*       type=\"text\"*/}\n                {/*       value={this.state.step}*/}\n                {/*       onChange={this.handleInput}*/}\n                {/*       name=\"step\"/>*/}\n                {/*<button className=\"btn btn-success mb-3\" onClick={(e) => this.addStep(e)}>Add Steps</button>*/}\n                <button className=\"btn btn-primary\" type=\"submit\">Add Recipe</button>\n            </form>\n        );\n    }\n\n}\n\nexport default Ingredients;","import './App.css';\nimport {Component} from 'react';\nimport {Switch, Route} from 'react-router-dom';\nimport RecipeList from './components/layout/recipe/RecipeList';\nimport RecipeDisplay from './components/layout/recipe/RecipeDisplay';\nimport Ingredients from './components/layout/recipe/Ingredients';\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <Switch>\n                    <Route path=\"/recipes\" component={RecipeList}/>\n                    <Route path=\"/recipe/:id\">\n                        <RecipeDisplay/>\n                    </Route>\n                    <Route path=\"/create-recipe\" component={Ingredients}/>\n                </Switch>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <App/>\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}