{"version":3,"sources":["components/layout/recipe/Ingredients.js","App.js","reportWebVitals.js","index.js"],"names":["Ingredients","props","state","title","name","handleInput","bind","handleSubmit","event","this","setState","target","value","e","a","preventDefault","options","method","headers","body","JSON","stringify","fetch","action","onSubmit","htmlFor","type","onChange","id","className","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wRAkFeA,E,kDA9EX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CAGTC,MAAO,GACPC,KAAM,IAEV,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBATL,E,+CAYnB,SAAYE,GACRC,KAAKC,SAAL,eAAgBF,EAAMG,OAAOP,KAAOI,EAAMG,OAAOC,U,iEAarD,WAAmBC,GAAnB,eAAAC,EAAA,6DACID,EAAEE,iBACIC,EAAU,CACZC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAGpBC,KAAMC,KAAKC,UAAU,CACjBlB,MAAOM,KAAKP,MAAMC,MAClBC,KAAMK,KAAKP,MAAME,QAV7B,SAaUkB,MAAM,mBAAoBN,GAbpC,OAcIP,KAAKC,SAAS,CAACP,MAAOM,KAAKP,MAAMC,MAAOC,KAAMK,KAAKP,MAAME,OAd7D,gD,2EAiBA,WAMI,OACI,uBAAMmB,OAAO,GAAGC,SAAUf,KAAKF,aAA/B,UACI,mDACA,uBAAOkB,QAAQ,QAAf,yBACA,uBAAOC,KAAK,OAAOC,SAAUlB,KAAKJ,YAAaO,MAAOH,KAAKP,MAAMC,MAAOC,KAAK,QAAQwB,GAAG,KACxF,uBAAOH,QAAQ,OAAf,uBACA,uBAAOC,KAAK,OAAOC,SAAUlB,KAAKJ,YAAaO,MAAOH,KAAKP,MAAME,KAAMA,KAAK,SAgB5E,wBAAQyB,UAAU,kBAAkBH,KAAK,SAAzC,+B,GAxEUI,aCWXC,E,4JATX,WACI,OACI,qBAAKF,UAAU,MAAf,SACI,cAAC,EAAD,U,GAJEC,aCQHE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b85c86d3.chunk.js","sourcesContent":["import {Component} from 'react';\nimport Cookies from 'js-cookie';\n\nclass Ingredients extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            // ingredient_array: [],\n            // measurements: '',\n            title: '',\n            name: '',\n        };\n        this.handleInput = this.handleInput.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleInput(event) {\n        this.setState({[event.target.name]: event.target.value});\n    }\n\n    // addIngredient(e) {\n    //     e.preventDefault();\n    //     this.setState({ingredient_array: [...this.state.ingredient_array, this.state.ingredients]});\n    // }\n    //\n    // addStep(e) {\n    //     e.preventDefault();\n    //     this.setState({steps: [...this.state.steps, this.state.step]})\n    // }\n\n    async handleSubmit(e) {\n        e.preventDefault();\n        const options = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'Application/Json',\n                // 'X-CSRFToken': Cookies.get(\"csrftoken\")\n            },\n            body: JSON.stringify({\n                title: this.state.title,\n                name: this.state.name\n            })\n        };\n        await fetch('/api/v1/recipes/', options);\n        this.setState({title: this.state.title, name: this.state.name});\n    }\n\n    render() {\n        // const stepsDisplay = this.state.steps?.map(x => <textarea>{x}</textarea>);\n        // const ingredientDisplay = this.state.ingredient_array?.map((x, index) => <div key={index}>\n        //     <input key={index} type=\"text\" value={x} disabled/>\n        //     <button className=\"btn btn-danger\" onClick={(e) => e.preventDefault()}>X</button>\n        // </div>);\n        return (\n            <form action=\"\" onSubmit={this.handleSubmit}>\n                <h2>Add an Ingredient</h2>\n                <label htmlFor=\"title\">Recipe Name</label>\n                <input type=\"text\" onChange={this.handleInput} value={this.state.title} name=\"title\" id=\"\"/>\n                <label htmlFor=\"name\">Your Name</label>\n                <input type=\"text\" onChange={this.handleInput} value={this.state.name} name=\"name\"/>\n                {/*<label htmlFor=\"ingredients\">Ingredients</label>*/}\n                {/*{ingredientDisplay}*/}\n                {/*<input className=\"form-control\"*/}\n                {/*       type=\"text\"*/}\n                {/*       name=\"ingredients\"*/}\n                {/*       value={this.state.ingredients}*/}\n                {/*       onChange={this.handleInput}/>*/}\n                {/*<button className=\"btn btn-success\" onClick={(e) => this.addIngredient(e)}>Add Ingredient</button>*/}\n                {/*<label htmlFor=\"step\">Steps</label>*/}\n                {/*<input className=\"form-control\"*/}\n                {/*       type=\"text\"*/}\n                {/*       value={this.state.step}*/}\n                {/*       onChange={this.handleInput}*/}\n                {/*       name=\"step\"/>*/}\n                {/*<button className=\"btn btn-success mb-3\" onClick={(e) => this.addStep(e)}>Add Steps</button>*/}\n                <button className=\"btn btn-primary\" type=\"submit\">Add Recipe</button>\n            </form>\n        );\n    }\n\n}\n\nexport default Ingredients;","import './App.css';\nimport {Component} from 'react';\nimport Ingredients from './components/layout/recipe/Ingredients';\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <Ingredients/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}